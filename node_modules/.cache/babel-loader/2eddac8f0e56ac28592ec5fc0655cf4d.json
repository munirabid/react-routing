{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\React\\\\react-routing-practice\\\\src\\\\components\\\\quotes\\\\QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isAscendingOrder = queryParams.get(\"sort\") === \"asc\";\n\n  const changeSortingHandler = () => {\n    history.push(\"/quotes?sort=\" + (isAscendingOrder ? \"desc\" : \"asc\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isAscendingOrder ? \"Decending\" : \"Ascending\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: props.quotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", true);\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"sources":["C:/Muneer/React/react-routing-practice/src/components/quotes/QuoteList.js"],"names":["Fragment","QuoteItem","classes","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","QuoteList","props","history","useHistory","location","useLocation","queryParams","URLSearchParams","search","isAscendingOrder","get","changeSortingHandler","push","sorting","list","map","quote","author","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AACA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AACxC,SAAOD,MAAM,CAACE,IAAP,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrC,QAAIH,SAAJ,EAAe;AACb,aAAOE,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD,KAFD,MAEO;AACL,aAAOF,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD;AACF,GANM,CAAP;AAOD,CARD;;AAUA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,OAAO,GAAGC,UAAU,EAA1B;AACA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AACA,QAAMC,WAAW,GAAG,IAAIC,eAAJ,CAAoBH,QAAQ,CAACI,MAA7B,CAApB;AACA,QAAMC,gBAAgB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA4B,KAArD;;AACA,QAAMC,oBAAoB,GAAG,MAAM;AACjCT,IAAAA,OAAO,CAACU,IAAR,CAAa,mBAAmBH,gBAAgB,GAAG,MAAH,GAAY,KAA/C,CAAb;AACD,GAFD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEjB,OAAO,CAACqB,OAAxB;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,oBAAjB;AAAA,4BACQF,gBAAgB,GAAG,WAAH,GAAiB,WADzC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAI,MAAA,SAAS,EAAEjB,OAAO,CAACsB,IAAvB;AAAA,gBACGb,KAAK,CAACP,MAAN,CAAaqB,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;AAEE,QAAA,EAAE,EAAEA,KAAK,CAACjB,EAFZ;AAGE,QAAA,MAAM,EAAEiB,KAAK,CAACC,MAHhB;AAIE,QAAA,IAAI,EAAED,KAAK,CAACE;AAJd,SACOF,KAAK,CAACjB,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5BD;;GAAMC,S;;KAAAA,S;AA8BN,eAAeA,SAAf","sourcesContent":["import { Fragment } from \"react\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isAscendingOrder = queryParams.get(\"sort\") === \"asc\";\n  const changeSortingHandler = () => {\n    history.push(\"/quotes?sort=\" + (isAscendingOrder ? \"desc\" : \"asc\"));\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isAscendingOrder ? \"Decending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"]},"metadata":{},"sourceType":"module"}