{"ast":null,"code":"import{Fragment}from\"react\";import{useHistory,useLocation}from\"react-router-dom\";import QuoteItem from\"./QuoteItem\";import classes from\"./QuoteList.module.css\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var sortQuotes=function sortQuotes(quotes,ascending){return quotes.sort(function(quoteA,quoteB){if(ascending){return quoteA.id>quoteB.id?1:-1;}else{return quoteA.id<quoteB.id?1:-1;}});};var QuoteList=function QuoteList(props){var history=useHistory();var location=useLocation();var queryParams=new URLSearchParams(location.search);var isAscendingOrder=queryParams.get(\"sort\")===\"asc\";var sortedQuotes=sortQuotes(props.quotes,isAscendingOrder);var changeSortingHandler=function changeSortingHandler(){history.push({pathname:location.pathname,search:\"?sort=\".concat(isAscendingOrder?\"desc\":\"asc\")});// history.push(`?sort=${isAscendingOrder ? \"desc\" : \"asc\"}`);\n};return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:classes.sorting,children:/*#__PURE__*/_jsxs(\"button\",{onClick:changeSortingHandler,children:[\"Sort \",isAscendingOrder?\"Decending\":\"Ascending\"]})}),/*#__PURE__*/_jsx(\"ul\",{className:classes.list,children:sortedQuotes.map(function(quote){return/*#__PURE__*/_jsx(QuoteItem,{id:quote.id,author:quote.author,text:quote.text},quote.id);})})]});};export default QuoteList;","map":{"version":3,"sources":["C:/Muneer/React/react-routing-practice/src/components/quotes/QuoteList.js"],"names":["Fragment","useHistory","useLocation","QuoteItem","classes","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","QuoteList","props","history","location","queryParams","URLSearchParams","search","isAscendingOrder","get","sortedQuotes","changeSortingHandler","push","pathname","sorting","list","map","quote","author","text"],"mappings":"AAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,UAAT,CAAqBC,WAArB,KAAwC,kBAAxC,CAEA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,C,wFAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,SAAT,CAAuB,CACxC,MAAOD,CAAAA,MAAM,CAACE,IAAP,CAAY,SAACC,MAAD,CAASC,MAAT,CAAoB,CACrC,GAAIH,SAAJ,CAAe,CACb,MAAOE,CAAAA,MAAM,CAACE,EAAP,CAAYD,MAAM,CAACC,EAAnB,CAAwB,CAAxB,CAA4B,CAAC,CAApC,CACD,CAFD,IAEO,CACL,MAAOF,CAAAA,MAAM,CAACE,EAAP,CAAYD,MAAM,CAACC,EAAnB,CAAwB,CAAxB,CAA4B,CAAC,CAApC,CACD,CACF,CANM,CAAP,CAOD,CARD,CAUA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAW,CAC3B,GAAMC,CAAAA,OAAO,CAAGb,UAAU,EAA1B,CACA,GAAMc,CAAAA,QAAQ,CAAGb,WAAW,EAA5B,CACA,GAAMc,CAAAA,WAAW,CAAG,GAAIC,CAAAA,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAApB,CACA,GAAMC,CAAAA,gBAAgB,CAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,IAA4B,KAArD,CACA,GAAMC,CAAAA,YAAY,CAAGhB,UAAU,CAACQ,KAAK,CAACP,MAAP,CAAea,gBAAf,CAA/B,CAEA,GAAMG,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjCR,OAAO,CAACS,IAAR,CAAa,CACXC,QAAQ,CAAET,QAAQ,CAACS,QADR,CAEXN,MAAM,iBAAWC,gBAAgB,CAAG,MAAH,CAAY,KAAvC,CAFK,CAAb,EAIA;AACD,CAND,CAQA,mBACE,MAAC,QAAD,yBACE,YAAK,SAAS,CAAEf,OAAO,CAACqB,OAAxB,uBACE,gBAAQ,OAAO,CAAEH,oBAAjB,mBACQH,gBAAgB,CAAG,WAAH,CAAiB,WADzC,GADF,EADF,cAME,WAAI,SAAS,CAAEf,OAAO,CAACsB,IAAvB,UACGL,YAAY,CAACM,GAAb,CAAiB,SAACC,KAAD,qBAChB,KAAC,SAAD,EAEE,EAAE,CAAEA,KAAK,CAACjB,EAFZ,CAGE,MAAM,CAAEiB,KAAK,CAACC,MAHhB,CAIE,IAAI,CAAED,KAAK,CAACE,IAJd,EACOF,KAAK,CAACjB,EADb,CADgB,EAAjB,CADH,EANF,GADF,CAmBD,CAlCD,CAoCA,cAAeC,CAAAA,SAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nimport QuoteItem from \"./QuoteItem\";\r\nimport classes from \"./QuoteList.module.css\";\r\n\r\nconst sortQuotes = (quotes, ascending) => {\r\n  return quotes.sort((quoteA, quoteB) => {\r\n    if (ascending) {\r\n      return quoteA.id > quoteB.id ? 1 : -1;\r\n    } else {\r\n      return quoteA.id < quoteB.id ? 1 : -1;\r\n    }\r\n  });\r\n};\r\n\r\nconst QuoteList = (props) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const isAscendingOrder = queryParams.get(\"sort\") === \"asc\";\r\n  const sortedQuotes = sortQuotes(props.quotes, isAscendingOrder);\r\n\r\n  const changeSortingHandler = () => {\r\n    history.push({\r\n      pathname: location.pathname,\r\n      search: `?sort=${isAscendingOrder ? \"desc\" : \"asc\"}`,\r\n    });\r\n    // history.push(`?sort=${isAscendingOrder ? \"desc\" : \"asc\"}`);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.sorting}>\r\n        <button onClick={changeSortingHandler}>\r\n          Sort {isAscendingOrder ? \"Decending\" : \"Ascending\"}\r\n        </button>\r\n      </div>\r\n      <ul className={classes.list}>\r\n        {sortedQuotes.map((quote) => (\r\n          <QuoteItem\r\n            key={quote.id}\r\n            id={quote.id}\r\n            author={quote.author}\r\n            text={quote.text}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteList;\r\n"]},"metadata":{},"sourceType":"module"}